- job:
    name: build-dqlite
    node: noop-parent-jobs
    project-type: "multijob"
    concurrent: true
    description: |-
      Build dqlite libraries for specified platform
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
      - build-name:
          name: build-dqlite
    parameters:
      - validating-string:
          description: The git short hash for the commit you wish to build
          name: SHORT_GIT_COMMIT
          regex: ^\S{{7}}$
          msg: Enter a valid 7 char git sha
    builders:
      - multijob:
          name: build-dqlite-runner
          projects:
            - name: build-dqlite-amd64
              current-parameters: true
              predefined-parameters: |-
                GIT_COMMIT=${{SHORT_GIT_COMMIT}}
            - name: build-dqlite-arm64
              current-parameters: true
              predefined-parameters: |-
                GIT_COMMIT=${{SHORT_GIT_COMMIT}}
            - name: build-dqlite-ppc64el
              current-parameters: true
              predefined-parameters: |-
                GIT_COMMIT=${{SHORT_GIT_COMMIT}}
            - name: build-dqlite-riscv64
              current-parameters: true
              predefined-parameters: |-
                GIT_COMMIT=${{SHORT_GIT_COMMIT}}
            - name: build-dqlite-s390x
              current-parameters: true
              predefined-parameters: |-
                GIT_COMMIT=${{SHORT_GIT_COMMIT}}

- job:
    name: build-dqlite-amd64
    node: ephemeral-noble-8c-32g-amd64
    concurrent: true
    description: |-
      Build dqlite libraries for specified platform
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
      - cirun-test-stuck-timeout
    parameters:
      - validating-string:
          description: The git short hash for the commit you wish to build
          name: SHORT_GIT_COMMIT
          regex: ^\S{{7}}$
          msg: Enter a valid 7 char git sha
    builders:
      - common
      - set-common-environment
      - install-common-tools
      - detect-commit-go-version
      - setup-go-environment
      - get-s3-source-payload
      - make-dqlite
      - upload-s3-dqlite:
          arch: "amd64"

- job:
    name: build-dqlite-arm64
    node: ephemeral-noble-8c-32g-arm64
    concurrent: true
    description: |-
      Build dqlite libraries for specified platform
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
      - cirun-test-stuck-timeout
    parameters:
      - validating-string:
          description: The git short hash for the commit you wish to build
          name: SHORT_GIT_COMMIT
          regex: ^\S{{7}}$
          msg: Enter a valid 7 char git sha
    builders:
      - common
      - set-common-environment
      - install-common-tools
      - detect-commit-go-version
      - setup-go-environment
      - get-s3-source-payload
      - make-dqlite
      - upload-s3-dqlite:
          arch: "arm64"

- builder:
    name: "make-dqlite"
    builders:
      - host-src-command:
          src_command: !include-raw-verbatim: ../scripts/snippet_make-dqlite-build.sh

- job:
    name: build-dqlite-ppc64el
    node: ephemeral-noble-8c-32g-amd64
    concurrent: true
    description: |-
      Build dqlite libraries for specified platform
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
      - cirun-test-stuck-timeout
    parameters:
      - validating-string:
          description: The git short hash for the commit you wish to build
          name: SHORT_GIT_COMMIT
          regex: ^\S{{7}}$
          msg: Enter a valid 7 char git sha
    builders:
      - common
      - set-common-environment
      - install-common-tools
      - install-docker
      - detect-commit-go-version
      - setup-go-environment
      - get-s3-source-payload
      - make-cross-dqlite:
          arch: "ppc64el"
      - upload-s3-dqlite:
          arch: "ppc64el"

- job:
    name: build-dqlite-riscv64
    node: ephemeral-noble-8c-32g-amd64
    concurrent: true
    description: |-
      Build dqlite libraries for specified platform
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
      - cirun-test-stuck-timeout
    parameters:
      - validating-string:
          description: The git short hash for the commit you wish to build
          name: SHORT_GIT_COMMIT
          regex: ^\S{{7}}$
          msg: Enter a valid 7 char git sha
    builders:
      - common
      - set-common-environment
      - install-common-tools
      - install-docker
      - detect-commit-go-version
      - setup-go-environment
      - get-s3-source-payload
      - make-cross-dqlite:
          arch: "riscv64"
      - upload-s3-dqlite:
          arch: "riscv64"

- job:
    name: build-dqlite-s390x
    node: ephemeral-noble-8c-32g-amd64
    concurrent: true
    description: |-
      Build dqlite libraries for specified platform
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
      - cirun-test-stuck-timeout
    parameters:
      - validating-string:
          description: The git short hash for the commit you wish to build
          name: SHORT_GIT_COMMIT
          regex: ^\S{{7}}$
          msg: Enter a valid 7 char git sha
    builders:
      - common
      - set-common-environment
      - install-common-tools
      - install-docker
      - detect-commit-go-version
      - setup-go-environment
      - get-s3-source-payload
      - make-cross-dqlite:
          arch: "s390x"
      - upload-s3-dqlite:
          arch: "s390x"

- builder:
    name: "make-cross-dqlite"
    builders:
      - shell: |-
          #!/bin/bash
          set -eu

          if [ -z "{arch}" ]; then
              echo "arch var is empty"
              exit 1
          fi

          echo "Cross compiling dqlite for {arch}"

          sudo docker run --rm --privileged multiarch/qemu-user-static:register --reset
          sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

          sudo docker run --mount "type=bind,source=$JUJU_SRC_PATH,target=/juju" "multiarch/ubuntu-core:{arch}-focal" /bin/bash -c '
          apt-get update
          apt-get install sudo make -y
          cd /juju
          make -j`nproc` dqlite-build

- builder:
    name: "upload-s3-dqlite"
    builders:
      - install-s3cmd
      - get-s3-creds
      - shell: |-
          #!/bin/bash
          set -eu

          if [ -z "{arch}" ]; then
              echo "arch var is empty"
              exit 1
          fi

          echo "Uploading dqlite binaries for {arch}"

          DQLITE_BUILD_ARCH={arch}

          PROJECT_DIR=${{GOPATH}}/src/github.com/juju/juju

          DQLITE_ARCHIVE_DEPS_PATH=${{PROJECT_DIR}}/_build/
          DQLITE_ARCHIVE_NAME=dqlite-deps
          DQLITE_ARCHIVE_PATH=${{DQLITE_ARCHIVE_DEPS_PATH}}/${{DQLITE_ARCHIVE_NAME}}.tar.bz2

          DQLITE_S3_BUCKET=s3://dqlite-static-libs
          DQLITE_S3_ARCHIVE_NAME=$(date -u +"%Y-%m-%d")-dqlite-deps-${{DQLITE_BUILD_ARCH}}.tar.bz2
          DQLITE_S3_ARCHIVE_PATH=${{DQLITE_S3_BUCKET}}/${{DQLITE_S3_ARCHIVE_NAME}}

          s3cmd --config $S3_CFG ls

          echo "Uploading specific {arch} dqlite binary"

          s3cmd --config $S3_CFG \
            put \
            --no-progress \
            ${{DQLITE_ARCHIVE_PATH}} \
            ${{DQLITE_S3_ARCHIVE_PATH}}

          echo "Uploading specific latest dqlite binary"

          SUM=$(sha256sum ${{DQLITE_ARCHIVE_PATH}} | cut -d " " -f 1)
          s3cmd --config $S3_CFG \
            put \
            --no-progress \
            ${{DQLITE_ARCHIVE_PATH}} \
            ${{DQLITE_S3_BUCKET}}/${{SUM}}.tar.bz2
